import 'package:flutter/material.dart';
import 'package:fortune_spinner/fortune_spinner.dart';

import 'gen/assets.gen.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Fortune Spinner Demo',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: const MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key});

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final wheelKey = GlobalKey<FortuneWheelWidgetState>();

  void _onSpinResult(SectionType result) {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –¥–∏–∞–ª–æ–≥–æ–≤–æ–º –æ–∫–Ω–µ
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text(
            result == SectionType.win
                ? 'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!'
                : 'üòî –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑',
            textAlign: TextAlign.center,
          ),
          content: Text(
            result == SectionType.win
                ? '–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!'
                : '–ù–µ –ø–æ–≤–µ–∑–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
            textAlign: TextAlign.center,
            style: const TextStyle(fontSize: 18),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: const Text('OK'),
            ),
          ],
        );
      },
    );
  }

  void _spin() {
    // –ü—Ä–æ—Å—Ç–æ –∫—Ä—É—Ç–∏–º –∫–æ–ª–µ—Å–æ –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ü–µ–ª–∏
    wheelKey.currentState?.spin();
  }

  void _spinToWin() {
    wheelKey.currentState?.spinToWin();
  }

  void _spinToLose() {
    wheelKey.currentState?.spinToLose();
  }

  // –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –∫–æ–ª–µ—Å–æ –¥–æ—Å—Ç–∏–≥–ª–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
  void _onConstantSpeedReached() {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø—Ä–æ—Å –∫ API)
    _performApiCall();
  }

  // –°–∏–º—É–ª—è—Ü–∏—è API –≤—ã–∑–æ–≤–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
  Future<void> _performApiCall() async {
    try {
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
      await Future.delayed(const Duration(seconds: 2));

      // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–æ–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É API
      // throw Exception('API Error: Connection timeout');

      // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç API —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
      // –í–∞—Ä–∏–∞–Ω—Ç 1: API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Å–µ–∫—Ü–∏–∏
      // final apiResultIndex = 3; // –°–µ–∫—Ü–∏—è —Å –∏–Ω–¥–µ–∫—Å–æ–º 3

      // –í–∞—Ä–∏–∞–Ω—Ç 2: API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–≤—ã–∏–≥—Ä–∞–ª/–ø—Ä–æ–∏–≥—Ä–∞–ª)
      // final apiResultType = SectionType.win; // –∏–ª–∏ SectionType.lose

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–æ–ª–µ—Å–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Ç API
      // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏–±–æ –∏–Ω–¥–µ–∫—Å, –ª–∏–±–æ —Ç–∏–ø, –ª–∏–±–æ –Ω–∏—á–µ–≥–æ (—Å–ª—É—á–∞–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞)
      wheelKey.currentState?.notifyExternalFunctionComplete(
        // targetSectionIndex: 3, // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ–∫—Ü–∏–∏
        // targetSectionType:
        //     apiResultType, // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–π —Å–µ–∫—Ü–∏–∏ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
      );
    } catch (error, stackTrace) {
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ —É–≤–µ–¥–æ–º–ª—è–µ–º –∫–æ–ª–µ—Å–æ, –ø–µ—Ä–µ–¥–∞–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
      wheelKey.currentState?.notifyExternalFunctionError(error, stackTrace);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
  void _onError(Object error, StackTrace stackTrace) {
    // –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å
    debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ API –∑–∞–ø—Ä–æ—Å–∞: $error');
    debugPrint('StackTrace: $stackTrace');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: $error'),
          backgroundColor: Colors.red,
          duration: const Duration(seconds: 3),
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        title: const Text('–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã'),
      ),
      backgroundColor: Colors.white,
      body: SafeArea(
        child: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              const SizedBox(height: 30),
              Expanded(
                child: Center(
                  child: FortuneWheelWidget(
                    key: wheelKey,
                    onResult: _onSpinResult,
                    onConstantSpeedReached: _onConstantSpeedReached,
                    onError: _onError,
                    allowSpinCompletionOnError: false,
                    pointerOffset: 20,
                    sectionsCount: 10,
                    accelerationDuration: 1.0,
                    spinDuration: 2.0,
                    decelerationDuration: 1.0,
                    speed: 0.2,
                    theme: FortuneWheelTheme(
                      backgroundColor: Colors.transparent,
                      pointerTheme: PointerTheme(
                        gradient: LinearGradient(
                          colors: [Color(0xFFCC890B), Color(0xFFFFF38F)],
                          begin: Alignment.topCenter,
                          end: Alignment.bottomCenter,
                        ),
                        shadows: [
                          BoxShadow(
                            color: Colors.black.withValues(alpha: 0.25),
                            blurRadius: 1.82,
                            offset: Offset(0, 4.37),
                          ),
                        ],
                      ),
                      sectionsTheme: WheelSectionsTheme(
                        colors: [
                          Color(0xFF1FA863),
                          Color(0xFF1FA863).withValues(alpha: 0.5),
                        ],
                        sectionBorderRadius: 10,
                        sectionBorderWidth: 5,
                        sectionBorderColor: Colors.white,
                      ),
                      borderTheme: WheelBorderTheme(
                        color: Colors.transparent,
                        width: 0,
                      ),
                      centerCircleTheme: CenterCircleTheme(
                        color: Colors.white,
                        borderColor: Color(0xFFF07820),
                        borderWidth: 7,
                        radius: 13,
                      ),
                    ),
                    winImagePath: Assets.svg.win.path,
                    loseImagePath: Assets.svg.lose.path,
                  ),
                ),
              ),

              const SizedBox(height: 10),
              // –ö–Ω–æ–ø–∫–∏ —Å —Ü–µ–ª–µ–≤—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  ElevatedButton(
                    onPressed: _spinToWin,
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.green,
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(
                        horizontal: 24,
                        vertical: 12,
                      ),
                    ),
                    child: const Text('–í—ã–∏–≥—Ä–∞—Ç—å'),
                  ),
                  const SizedBox(width: 16),
                  ElevatedButton(
                    onPressed: _spinToLose,
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.red,
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(
                        horizontal: 24,
                        vertical: 12,
                      ),
                    ),
                    child: const Text('–ü—Ä–æ–∏–≥—Ä–∞—Ç—å'),
                  ),
                ],
              ),
              const SizedBox(height: 10),
              // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –≤—Ä–∞—â–µ–Ω–∏—è
              ElevatedButton(
                onPressed: _spin,
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.blue,
                  foregroundColor: Colors.white,
                  padding: const EdgeInsets.symmetric(
                    horizontal: 32,
                    vertical: 12,
                  ),
                ),
                child: const Text('–ö—Ä—É—Ç–∏—Ç—å'),
              ),
              const SizedBox(height: 30),
            ],
          ),
        ),
      ),
    );
  }
}
